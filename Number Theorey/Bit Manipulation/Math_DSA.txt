// kk 
Bit Manipulation

1. And :- 0-> false 1-> true (Both the Condition be true then and if condition is true)
ðŸŒŸWheneer you & with 1 any number Digits Remain the same(binary)
ðŸŒŸwhenever you & with 0 it will give you 0(binary)
    1 1 0 0 1 0 1 0 0
  & 1 1 1 1 1 1 1 1 1
    1 1 0 0 1 0 1 0 0

    a   |   b    |   a&b
    -----------------------
    0   |   0    |    0
    0   |   1    |    0
    1   |   0    |    0
    1   |   1    |    1

2. Or :- If any 1 condition is true Entire Condition is true

    a   |   b    |   a||b
    -----------------------
    0   |   0    |    0
    0   |   1    |    1
    1   |   0    |    1
    1   |   1    |    1

3. Xor  :- ^ (if and only if) (exclusive or) :- if you have 2 number than only one should be true

ðŸŒŸ if any xor any number with 1  we will get complement of that number 
    a ^ 1 = a'
ðŸŒŸ a ^ 0 = 0
ðŸŒŸ a ^ a = 0
    a   |   b    |   a^b
    -----------------------
    0   |   0    |    0 
    0   |   1    |    1
    1   |   0    |    1
    1   |   1    |    0

4. Complement Operators (~) 

        a = 1 0 1 1 0
        a'= 0 1 0 0 1

5. LeftShift Operator (<<)
    10 --> (1010) 
    10<<1 --> 10100(20) (they are shifted by 1 to the left)
    ðŸŒŸ a<<1 = 2*a;
    ðŸŒŸ a<<b = a*(2^b) e.g --> 2<<2 = 2*(2^2) = 8;

6. RightShift Operator (>>)
    0011001 >> 1 -> 001100 (they are shifted to right by 1) (Ignore last bit)
    ( leading zeros are ignore ) 1100
    ðŸŒŸ a>>b = a / (2^b);


NUMBER SYSTEMS

1. Decimal (0-9) 
2. Binary (0-1)
3. Octal  (0-7)
4. HexaDecimal (0-9 & A-F)


CONVERSION'S
1. conversion from decimal to base b 
        keep dividing by base,take remaindres and write in opposite (Division Method)
2. conversion from base b to Decimal 
        multiply and add the power of base with digit..


NEGATIVE OF NUMBER IN Binary Form
1 Byte = 8 bits


MSB tells us that number is negative or positive 
1-> -ve 
0-> +ve
This is reserver bit and rest of the bit represent number 

10  -> 0 0 0 0 1 0 1 0
-10 -> 1 0 0 0 1 0 1 0

1. Take complement of number 
2. add 1 to it 

these above 2 steps is known as 2's Complement Method 


10 -> 0001010

1. -> 1110101
2. ->       1
--------------
      11110110 -> (-10) when store in 1 Byte data type

RANGE OF NUMBERS

1 Byte :- total 256 can store
 
actual no is stored in bits = n-1 total bits
beacause last bit is reserved for Positive ans negative
7 bits = 2^7 = -128 to 127 (including 0)  256 
beacause negative of zero is 0

formula to find range for n bits 
 
 ðŸŒŸ -2^(n-1) to 2^(n-1) -1

